#include "predict_percep.h"

int PredictPercep(int argc, char **argv)
{
 if ( argc != 6 )
 {
   cerr << "\n\n\n";
   cerr << "Usage: " << argv[0] << " <task> [params]\n";
   cerr << "<task>: operation to be performed on data. \n";
   cerr << "        0 - correlation analysis\n";
   cerr << "        1 - naive prediction\n";
   cerr << "        2 - perceptron prediction\n";
   cerr << "        3 - neural network\n";
   cerr << "<prefix>: I/O prefix\n";
   cerr << "[params]: algorithm specific parameters\n";
   cerr << endl;
   cerr << "perceptron prediction:\n";
   cerr << "[mode]: training(0)/testing(1)/both(2)\n";
   cerr << "[norm]: unnormalized(0)/normalized(1) data\n";
   cerr << "<lrate>: learning rate. \n";
   cerr << endl;
   cerr << "\n\n\n";
   exit(-1);
  }
  string test_filename;
  string train_filename;
  //
  string prefix = argv[2];
  cout << "# I/O prefix: " << prefix << endl;
  //
  int mode = atoi(argv[3]);
  cout << "# testing/training mode is: " << mode << endl;
  if( 0 > mode || mode > 2 )
  {
    cerr << "Assert: Invalid parameter [mode]\n\n";
    exit(-1);
  }    
  //
  int norm = atoi(argv[4]);
  cout << "# using normalized data: " << norm << endl;
  //
  if( norm==0 )
  {
    train_filename = prefix + "-unorm_train.dat";
    test_filename = prefix + "-unorm_test.dat";
  }
  else if( norm == 1)
  {
    train_filename = prefix + "-norm_train.dat";
    test_filename = prefix + "-norm_test.dat";
  }
  else
  {
    cerr << "Assert: Invalid parameter [norm]\n\n";
    exit(-1);
  }
  //
  float lrate = atof(argv[5]);
  cout << "# lrate is: " << lrate << endl;
  //
  ////////////////////////////////////////////////////////////
  //  Begin Test/Train
  ////////////////////////////////////////////////////////////
  perceptron_lin p1; //( lrate, nAtt );
  //
  // if training only or both training and testing
  // train naive predictor n1
  if( mode == 0 || mode == 2 )
  {
    //
    //  Read in training data
    ifstream ifile( train_filename.c_str() );
    if( !ifile )
    {
      cerr << "Assert: could not open file " << train_filename << endl;
      exit(-1);
    }
    int num_ex;
    int num_att;
    ifile >> num_ex >> num_att;
    p1 = perceptron_lin( lrate, (num_att-1) );
    vector< vector< float > > normParam;
    if( norm == 1 )
    {
      normParam = vector< vector< float > >(2);
      for( int i=0; i<2; i++ )
      {
        normParam[i] = vector< float >(num_att);
        for( int j=0; j<num_att; j++ )
        {
          ifile >> normParam[i][j];
        }
      }
    }
    vector< vector< float > > TrainExamples(num_ex);
    vector< float > jdate_train( num_ex );
    for( int i=0; i<num_ex; i++ )
    {
      TrainExamples[i]=vector< float >(num_att);
      ifile >> jdate_train[i];
      for( int j=0; j<num_att; j++ )
      {
        ifile >> TrainExamples[i][j];
      }
    }
    ifile.close();
    //
    // Train linear perceptron
    p1.TrainBatch( TrainExamples, 0.0001 );
    string ofile_name = prefix + "-percep_predictor.out";
    ofstream ofile( ofile_name.c_str() );
    if( !ofile )
    {
      cerr << "Assert: could not open file " << ofile_name << endl;
      exit(-1);
    }
    p1.Output( ofile );
    ofile.close();
    // 
    // Evaluate predictor performance on training set
    vector< vector< float > > Results_Train;
    Results_Train = p1.Test( TrainExamples );
    //
    // if using normalized values, unnormalize the results
    if( norm == 1 )
    {
      UnnormalizeResults( Results_Train, normParam );
    }
    //
    // Print out training error
    cout << "# Training:\n";
    PrintError( Results_Train );
    //PrintPredictions( Results_Train, jdate_train );
  }
  //
  // Testing only, so initialize naive predictor from file
  else
  {
    string ifile_name = prefix + "-naive_predictor.out";
    ifstream ifile( ifile_name.c_str() );
    if( !ifile )
    {
      cerr << "Assert: could not open file " << ifile_name << endl;
      exit(-1);
    }
    p1 = perceptron_lin( ifile );
    ifile.close();
  }
  //
  //  Testing only, and both Train/Test, Evaluate performance
  //  of predictor on Testing set
  if ( mode == 1 || mode == 2 )
  {
    //
    //  Read in testing data
    cout << "# Opening file: " << test_filename << endl;
    ifstream ifile( test_filename.c_str() );
    if( !ifile )
    {
      cerr << "Assert: could not open file " << test_filename << endl;
      exit(-1);
    }
    int num_ex;
    int num_att;
    ifile >> num_ex >> num_att;
    //cout << "# num_ex " << num_ex << " num_att " << num_att << endl;
    vector< vector< float > > normParam;
    if( norm == 1 )
    {
      normParam = vector< vector< float > >(2);
      for( int i=0; i<2; i++ )
      {
        normParam[i] = vector< float >(num_att);
        for( int j=0; j<num_att; j++ )
        {
          ifile >> normParam[i][j];
        }
      }
    }
    vector< vector< float > > TestExamples(num_ex);
    vector< float > jdate_test(num_ex);
    for( int i=0; i<num_ex; i++ )
    {
      TestExamples[i]=vector< float >(num_att);
      ifile >> jdate_test[i];
      //cout << jdate_test[i] << endl;
      for( int j=0; j<num_att; j++ )
      {
        ifile >> TestExamples[i][j];
        //cout <<setw(10)<< TestExamples[i][j];
      }
      //cout << endl;
    }
    // 
    // Evaluate predictor performance on testing set
    vector< vector< float > > Results_Test;
    Results_Test = p1.Test( TestExamples );
    //
    // if using normalized values, unnormalize the results
    if( norm == 1 )
    {
      UnnormalizeResults( Results_Test, normParam );
    }
    //
    // Print out testing error
    cout << "# Testing:\n";
    PrintError( Results_Test );
    PrintPredictions( Results_Test, jdate_test );
  }
}


