////////////////////////////////////////////////////////////////////////////
//
//  Creates time-series input files and performs correlation analysis
//  - 09.22.05	djhill1	created
//
////////////////////////////////////////////////////////////////////////////
#include "make_ifiles.h"
int MakeErrorDatafiles(int argc, char **argv)
{
    if ( argc != 9+2*(atoi(argv[5])) )
    {
      cerr << "\n\n\n";
      cerr << "Usage: " << argv[0] << " <task> [params]\n";
      cerr << "<task>: operation to be performed on data. \n";
      cerr << "        0 - create time-series datafiles\n";
      cerr << "        1 - correlation analysis\n";
      cerr << "        2 - naive prediction\n";
      cerr << "        3 - perceptron prediction\n";
      cerr << "        4 - neural network\n";
      cerr << "<prefix>: I/O prefix\n";
      cerr << "[params]: algorithm specific parameters\n";
      cerr << endl;
      cerr << "create time-series datafiles:\n";
      cerr << "[errType]: Error type frozen value(0), offset bias(1), variance degradation(2)\n";
      cerr << "[numFiles]: Number of datasets to create\n";
      cerr << "[datafile]: name of file containing data. \n";
      cerr << "[diff]: level of differencing only zero and first level differencing is supported. \n";
      cerr << "[nvar]: number of variables in datafile. \n";
      cerr << "[tgtIdx]: Column of target variable (first column = 0).\n";
      cerr << "[delay1]: delay before starting time-series of first variable\n";
      cerr << "[nlag1]: number of lags to compose the time-series of the first variable from\n";
      cerr << "[delay2]: delay before starting time-series of secon variable\n";
      cerr << "[nlag2]: number of lags to compose the time-series of the second variable from\n";
      cerr << "\n\n\n";
      exit(-1);
    }
    string prefix = argv[2];
    cout << "# I/O prefix: " << prefix << endl;
    //
    int err = atoi(argv[3]);
    cout << "# Error type is: " << err << endl;
    if( 0 > err || err > 3 )
    {
      cerr << "Assert: Invalid parameter [err]\n\n";
      exit(-1);
    }    
    //
    int num = atoi(argv[4]);
    cout << "# Number of datasets to create: " << num << endl;
    if( 0 > num )
    {
      cerr << "Assert: Invalid parameter [num]\n\n";
      exit(-1);
    }
    //
    string ifile_name = argv[5];
    cout << "# inputfile is: " << ifile_name << endl;
    //
    int diff = atoi(argv[6]);
    cout << "# differencing level is: " << diff << endl;
    if( diff < 0 || diff > 1)
    {
      cerr << "Assert: Invalid level of differencing\n\n";
      exit(-1);
    }
    //
    int nvar = atoi(argv[7]);
    cout << "# nvar is: " << nvar << endl;
    //
    int tgtIdx = atoi(argv[8]);
    cout << "# Target index is: " << tgtIdx << endl;
    if( tgtIdx > nvar-1 )
    {
      cerr << "Assert: Invalid target index\n\n";
      exit(-1);
    }
    //
    vector<int> delay(nvar);
    vector<int> nlags(nvar);
    cout << "# ( delay , lag )\n";
    for(int i=0; i< nvar; i++)
    {
      int argvIdx = 9+2*i;
      delay[i] = atoi(argv[argvIdx]);
      nlags[i] = atoi(argv[argvIdx+1]);
      if( i==tgtIdx && delay[i] <= 0)
      {
        delay[i]==1;
      }
      cout << "# ( " << delay[i] << "," << nlags[i] << " )" << endl;
    }
    int nAtt = 0;
    for( int i=0; i< nvar; i++)
    {
      nAtt += nlags[i];
    }
    //
    cout << "# Reading Data" << endl;
    vector< vector< float > > Examples;
    vector< string > Timestamp;
    //
    //
    //
    float NAFlag = -1000.0;
    cout << "# Determine number of attributes" << endl;
    // attributes = number of lags of each variable but does not include the target variable
    int nattributes = 0;
    for( int j=0; j<nvar; j++ )
    {
      nattributes += nlags[j];
    }
    cout << "# Number of attributes is: " << nattributes << endl;
    cout << "# Determine maximum memory" << endl;
    int max_memory = 0;
    for (int j=0; j< nvar; j++ )
    {
      if( max_memory < delay[j]+nlags[j] )
      {
        max_memory = delay[j]+nlags[j];
      }
    }
    cout << "# Maximum memory is: " << max_memory << endl;
    //open training data file
    ifstream ifile( ifile_name.c_str() );
    // create stack of examples
    vector< stack< float > > Points(nvar);
    stack< string > Timestamp_loc;
    string FullLine;
    getline(ifile, FullLine);
    while( ifile )
    {
      if (FullLine[0]!='#')
      {
        //cout << FullLine << endl;
        string tstamp;
        istringstream DataLine( FullLine );
        DataLine >> tstamp;
        for( int i=0; i<nvar; i++)
        {
          string a;
          DataLine >> a;
          // Flag NA records
          if( a == "NA" || a=="0.000" || a == "RM")
          {
            Points[i].push(NAFlag);
          }
          else
          {
            Points[i].push( atof( a.c_str() ) );
          }
        }
        Timestamp_loc.push( tstamp );
      }
      getline(ifile, FullLine);
    }
    //
    vector< vector< float > > Data = vector< vector< float > >( nvar );
    vector< string > TS = vector< string >( Timestamp_loc.size() );
    cout << "# Tabulate chronologically ordered data table" << endl;
    for( int i=0; i<nvar; i++ )
    {
      Data[i] = vector< float >( Points[i].size() );
      for( int j=Points[i].size()-1; j>=0; j--)
      {
        Data[i][j] = Points[i].top();
        Points[i].pop();
        if(i==0)
        {
          TS[j] = Timestamp_loc.top();
          Timestamp_loc.pop();
        }
      }
    }
    //
    //  Remove TrainData from Data vector
    //
    // Divide Examples into Training Set and Testing Set
    int numTrainEx = int( (2.0/3.0)*Data.size() );
    vector< vector< float > > TestExamples(Examples.size()-numTrainEx);
    vector< string > TestTimestamp(Examples.size()-numTrainEx);
    for(int i=0; i<Examples.size(); i++)
    {
      if(i<numTrainEx)
      {
      }
      else
      {
        TestTimestamp[i-numTrainEx] = TS[i];
        TestExamples[i-numTrainEx] = Data[i];
      }
    }
    
    cout << "# Total number of examples: " << Data.size() << endl;
    cout << "# Number of testing examples: " << TestExamples.size() << endl;
    cout << "# Testing period: ( " << TestTimestamp[0] << " , " << TestTimestamp[TestTimestamp.size()-1] << " )\n";
    //
    // Free up memory
    //
    Data.clear();
    //
    // Convert TestTimestamp to Julian Date
    //
    vector< double > jdate;
    JulianDate( TestTimestamp, jdate );
    //
    // Insert Errors!!!
    //
    vector< vector< float > > ErrorExamples;
    // Seed random number generator
    srand(static_cast<unsigned>(time(0)));
    int errorLoc;
    for( int i=0; i<num; i++ )
    {
      ErrorExamples = TestExamples;
      // randomly select location to inject error
      // choose random number between 0 and ErrorExamples.size()
      float numExamples = float( ErrorExamples.size() );
      float range = numExamples;
      errorLoc = int(range * rand()/(RAND_MAX+1.0));
      cout << "# Injecting error at time: " << setw(15) << fixed << jdate[errorLoc] << std::resetiosflags(std::ios::floatfield) << endl;
      //
      // filename for output
      string fname;
      ostringstream myStream;
      myStream << i << flush;
      string NumLabel = myStream.str();
      if(err == 0)
      {
        float frozenValue=ErrorExamples[errorLoc][0];
        for( int j=errorLoc; j<ErrorExamples.size(); j++ )
        {
          if( ErrorExamples[tgtIdx][j]!=NAFlag )
          {
            ErrorExamples[tgtIdx][j]=frozenValue;
          }
        }
        fname = "ErrFixed-"+NumLabel;
      }
      else if( err == 1 )
      {
        // chose offset randomly 
        // normalized data ranges from 0.1 to 0.9
        float offset = 0.1 +( (0.9-0.1) * rand()/(RAND_MAX+1.0));
        cout << "# Offset value is: " << offset << endl;
        for( int j=errorLoc; j<ErrorExamples.size(); j++ )
        {
          if( ErrorExamples[tgtIdx][j]!=NAFlag )
          {
            ErrorExamples[tgtIdx][j]+=offset;
          }
        }
        fname = "ErrOffset-"+NumLabel;      
      }
      else
      {
        for( int j=errorLoc; j<ErrorExamples.size(); j++ )
        {
          // standard dev increases from 0 to 10 over 7 days
          //alpha = (x-x_0)/(x_1-x_0) 
          float alpha = (jdate_test[j]-jdate_test[errorLoc])/(7.0);
          //y  = y_0 + alpha( y_1 - y_0 )
          float stdDev = 1e-4 + alpha*(10.0);
          RNG x;
          //
          if( ErrorExamples[tgtIdx][j]!=NAFlag )
          {
            ErrorExamples[tgtIdx][j] += x.uniform(0., stdDev); //RNG.uniform( mean, std dev)
          }
        }
        fname = "ErrVarDeg-"+NumLabel;      
      }
      //
      //  Compile Timeseries data
      //
      cout << "# Cannot use examples within nlags of data end" << endl;
      vector< vector< float > > temp_Examples = vector< vector< float > >( Data[0].size()-max_memory );
      vector< string > temp_Timestamp = vector< string >( Data[0].size()-max_memory);
      cout << "# Compile time-series data" << endl;
      for( int i=0; i<temp_Examples.size(); i++ )
      {
      temp_Examples[i] = vector< float >( nattributes+1 );
      temp_Timestamp[i] = TS[i+max_memory];
      // insert target attribute
      if(diff == 0)
      {
        temp_Examples[i][0] = Data[tgtIdx][i+max_memory];
      }
      else if( Data[tgtIdx][i] == NAFlag || Data[tgtIdx][i+1] == NAFlag )
      {
        temp_Examples[i][0] = Data[tgtIdx][i+max_memory];
      }
      else
      {
        temp_Examples[i][0] = Data[tgtIdx][i+max_memory]-Data[tgtIdx][i+max_memory-1];
      }
      int attCtr = 1;
      for( int j=0; j<nvar; j++)
      {
        for(int k=delay[j]; k<(delay[j]+nlags[j]); k++)
        {
          temp_Examples[i][attCtr] = Data[j][i+max_memory-k];
          attCtr++;
        }
      }    
    }
    // Print out uncleaned example table
    //for( int j=0; j<temp_Examples.size(); j++)
    //{
    //  cout << setw(15) << TS[j];
    //  for( int i=0; i<=nattributes; i++)
    //  {
    //    cout << setw(7) << temp_Examples[j][i];
    //  }
    //  cout << endl;
    //}
    cout << "# Clean time-series data by getting rid of records containing N/A records" << endl;
    for( int i=0; i<temp_Examples.size(); i++ )
    {
      int flag = 1;
      for( int j=0; j<=nattributes; j++ )
      {
        if( temp_Examples[i][j] == NAFlag )
        { 
          flag = 0;
        }
      }
      if( flag == 1 )
      {
        Examples.push_back(temp_Examples[i]);
        Timestamp.push_back(temp_Timestamp[i]);
      }
    }
    // Print out cleaned example table
    //for( int j=0; j<Examples.size(); j++)
    //{
    //  cout << setw(15) << Timestamp[j];
    //  for( int i=0; i<=nattributes; i++)
    //  {
    //    cout << setw(7) << Examples[j][i];
    //  }
    //  cout << endl;
    //}



int MakeDatafiles(int argc, char **argv)
{
    if ( argc != 7+2*(atoi(argv[5])) )
    {
      cerr << "\n\n\n";
      cerr << "Usage: " << argv[0] << " <task> [params]\n";
      cerr << "<task>: operation to be performed on data. \n";
      cerr << "        0 - create time-series datafiles\n";
      cerr << "        1 - correlation analysis\n";
      cerr << "        2 - naive prediction\n";
      cerr << "        3 - perceptron prediction\n";
      cerr << "        4 - neural network\n";
      cerr << "<prefix>: I/O prefix\n";
      cerr << "[params]: algorithm specific parameters\n";
      cerr << endl;
      cerr << "create time-series datafiles:\n";
      cerr << "[datafile]: name of file containing data. \n";
      cerr << "[diff]: level of differencing only zero and first level differencing is supported. \n";
      cerr << "[nvar]: number of variables in datafile. \n";
      cerr << "[tgtIdx]: Column of target variable (first column = 0).\n";
      cerr << "[delay1]: delay before starting time-series of first variable\n";
      cerr << "[nlag1]: number of lags to compose the time-series of the first variable from\n";
      cerr << "[delay2]: delay before starting time-series of secon variable\n";
      cerr << "[nlag2]: number of lags to compose the time-series of the second variable from\n";
      cerr << "\n\n\n";
      exit(-1);
    }
    string prefix = argv[2];
    cout << "# I/O prefix: " << prefix << endl;
    //
    string ifile_name = argv[3];
    cout << "# inputfile is: " << ifile_name << endl;
    //
    int diff = atoi(argv[4]);
    cout << "# differencing level is: " << diff << endl;
    if( diff < 0 || diff > 1)
    {
      cerr << "Assert: Invalid level of differencing\n\n";
      exit(-1);
    }
    //
    int nvar = atoi(argv[5]);
    cout << "# nvar is: " << nvar << endl;
    //
    int tgtIdx = atoi(argv[6]);
    cout << "# Target index is: " << tgtIdx << endl;
    if( tgtIdx > nvar-1 )
    {
      cerr << "Assert: Invalid target index\n\n";
      exit(-1);
    }
    //
    vector<int> delay(nvar);
    vector<int> nlags(nvar);
    cout << "# ( delay , lag )\n";
    for(int i=0; i< nvar; i++)
    {
      int argvIdx = 7+2*i;
      delay[i] = atoi(argv[argvIdx]);
      nlags[i] = atoi(argv[argvIdx+1]);
      if( i==tgtIdx && delay[i] <= 0)
      {
        delay[i]==1;
      }
      cout << "# ( " << delay[i] << "," << nlags[i] << " )" << endl;
    }
    int nAtt = 0;
    for( int i=0; i< nvar; i++)
    {
      nAtt += nlags[i];
    }
    //
    cout << "# Reading Data" << endl;
    vector< vector< float > > Examples;
    vector< string > Timestamp;
    ReadData( ifile_name, diff, nvar, tgtIdx, delay, nlags, Examples, Timestamp );
    
    // Divide Examples into Training Set and Testing Set
    int numTrainEx = int( (2.0/3.0)*Examples.size() );
    vector< vector< float > > TrainExamples(numTrainEx);
    vector< string > TrainTimestamp(numTrainEx);
    vector< vector< float > > TestExamples(Examples.size()-numTrainEx);
    vector< string > TestTimestamp(Examples.size()-numTrainEx);
    for(int i=0; i<Examples.size(); i++)
    {
      if(i<numTrainEx)
      {
        TrainTimestamp[i] = Timestamp[i];
        TrainExamples[i] = Examples[i];
      }
      else
      {
        TestTimestamp[i-numTrainEx] = Timestamp[i];
        TestExamples[i-numTrainEx] = Examples[i];
      }
    }
    
    cout << "# Total number of examples: " << Examples.size() << endl;
    cout << "# Number of training examples: " << TrainExamples.size() << endl;
    cout << "# Number of testing examples: " << TestExamples.size() << endl;
    cout << "# Training period: ( " << TrainTimestamp[0] << " , " << TrainTimestamp[TrainTimestamp.size()-1] << " )\n";
    cout << "# Testing period: ( " << TestTimestamp[0] << " , " << TestTimestamp[TestTimestamp.size()-1] << " )\n";
    //
    // create un-normalized training file
    vector< double > TimestampJ;
    JulianDate( TrainTimestamp, TimestampJ );
    //cout << "TrainExamples " << TrainExamples.size() << " " << TrainExamples[0].size() <<endl;
    //cout << "Timestampsize " << TimestampJ.size() << endl;
    string fname = prefix + "-" + "unorm_train.dat";
    ofstream ofile( fname.c_str() );
    ofile << setw(15) << TrainExamples.size() << setw(15) << TrainExamples[0].size() << endl;
    for( int i=0; i<TrainExamples.size(); i++ )
    {
      ofile << setw(15) << fixed << TimestampJ[i] << std::resetiosflags(std::ios::floatfield);
      for( int j=0; j<TrainExamples[0].size(); j++ )
      {
        ofile << setw(15) << TrainExamples[i][j];
      }
      ofile << endl;
    }
    ofile.close();
    //
    // create normalized training file
    vector< vector< float > > normParam;
    NormalizeExamples( 0, TrainExamples, normParam );
    fname = prefix + "-" + "norm_train.dat";
    ofile.open( fname.c_str() );
    //  write # rows, # cols
    ofile << setw(15) << TrainExamples.size() << setw(15) << TrainExamples[0].size() << endl;
    //  write normalization information
    for(int i=0; i<2; i++)
    {
      for(int j=0; j<normParam[i].size(); j++)
      {
        ofile << setw(15) << normParam[i][j];
      }
      ofile << endl;
    }
    // write data
    for( int i=0; i<TrainExamples.size(); i++ )
    {
      ofile << setw(15) << fixed << TimestampJ[i] << std::resetiosflags(std::ios::floatfield);
      for( int j=0; j<TrainExamples[i].size(); j++ )
      {
        ofile << setw(15) << TrainExamples[i][j];
      }
      ofile << endl;
    }
    ofile.close();
    //
    // create un-normalized testing file
    JulianDate( TestTimestamp, TimestampJ );
    fname = prefix + "-" + "unorm_test.dat";
    ofile.open( fname.c_str() );
    ofile << setw(15) << TestExamples.size() << setw(15) << TestExamples[0].size() << endl;
    for( int i=0; i<TestExamples.size(); i++ )
    {
      ofile << setw(15) << fixed << TimestampJ[i] << std::resetiosflags(std::ios::floatfield);
      for( int j=0; j<TestExamples[i].size(); j++ )
      {
        ofile << setw(15) << TestExamples[i][j];
      }
      ofile << endl;
    }
    ofile.close();
    //
    // create normalized testing file
    NormalizeExamples( 1, TestExamples, normParam );
    fname = prefix + "-" + "norm_test.dat";
    ofile.open( fname.c_str() );
    ofile << setw(15) << TestExamples.size() << setw(15) << TestExamples[0].size() << endl;
    for(int i=0; i<2; i++)
    {
      for(int j=0; j<normParam[i].size(); j++)
      {
        ofile << setw(15) << normParam[i][j];
      }
      ofile << endl;
    }
    for( int i=0; i<TestExamples.size(); i++ )
    {
      ofile << setw(15) << fixed << TimestampJ[i] << std::resetiosflags(std::ios::floatfield);
      for( int j=0; j<TestExamples[i].size(); j++ )
      {
        ofile << setw(15) << TestExamples[i][j];
      }
      ofile << endl;
    }
    ofile.close();
}


void ReadData( const string& inputfile, const int diff, const int nvar, const int tgtIdx, const vector< int >& delay, const vector< int >& nlags, vector< vector< float > >& Examples, vector< string >& Timestamp )  
{
  float NAFlag = -1000.0;
  cout << "# Determine number of attributes" << endl;
  // attributes = number of lags of each variable but does not include the target variable
  int nattributes = 0;
  for( int j=0; j<nvar; j++ )
  {
    nattributes += nlags[j];
  }
  cout << "# Number of attributes is: " << nattributes << endl;
  cout << "# Determine maximum memory" << endl;
  int max_memory = 0;
  for (int j=0; j< nvar; j++ )
  {
    if( max_memory < delay[j]+nlags[j] )
    {
      max_memory = delay[j]+nlags[j];
    }
  }
  cout << "# Maximum memory is: " << max_memory << endl;
  //open training data file
  ifstream ifile( inputfile.c_str() );
  // create stack of examples
  vector< stack< float > > Points(nvar);
  stack< string > Timestamp_loc;
  string FullLine;
  getline(ifile, FullLine);
  while( ifile )
  {
    if (FullLine[0]!='#')
    {
      //cout << FullLine << endl;
      string tstamp;
      istringstream DataLine( FullLine );
      DataLine >> tstamp;
      for( int i=0; i<nvar; i++)
      {
        string a;
        DataLine >> a;
        // Flag NA records
        if( a == "NA" || a=="0.000" || a == "RM")
        {
          Points[i].push(NAFlag);
        }
        else
        {
          Points[i].push( atof( a.c_str() ) );
        }
      }
      Timestamp_loc.push( tstamp );
    }
    getline(ifile, FullLine);
  }
  
  vector< vector< float > > Data = vector< vector< float > >( nvar );
  vector< string > TS = vector< string >( Timestamp_loc.size() );
  cout << "# Tabulate chronologically ordered data table" << endl;
  for( int i=0; i<nvar; i++ )
  {
    Data[i] = vector< float >( Points[i].size() );
    for( int j=Points[i].size()-1; j>=0; j--)
    {
      Data[i][j] = Points[i].top();
      Points[i].pop();
      if(i==0)
      {
        TS[j] = Timestamp_loc.top();
        Timestamp_loc.pop();
      }
    }
  }
  // Print out table of data
  //for( int j=0; j<Data[0].size(); j++)
  //{
  //  cout << setw(15) << TS[j];
  //  for( int i=0; i< nvar; i++)
  //  {
  //    cout << setw(7) << Data[i][j];
  //  }
  //  cout << endl;
  //}
  cout << "# Cannot use examples within nlags of data end" << endl;
  vector< vector< float > > temp_Examples = vector< vector< float > >( Data[0].size()-max_memory );
  vector< string > temp_Timestamp = vector< string >( Data[0].size()-max_memory);
  cout << "# Compile time-series data" << endl;
  for( int i=0; i<temp_Examples.size(); i++ )
  {
    temp_Examples[i] = vector< float >( nattributes+1 );
    temp_Timestamp[i] = TS[i+max_memory];
    // insert target attribute
    if(diff == 0)
    {
      temp_Examples[i][0] = Data[tgtIdx][i+max_memory];
    }
    else if( Data[tgtIdx][i] == NAFlag || Data[tgtIdx][i+1] == NAFlag )
    {
      temp_Examples[i][0] = Data[tgtIdx][i+max_memory];
    }
    else
    {
      temp_Examples[i][0] = Data[tgtIdx][i+max_memory]-Data[tgtIdx][i+max_memory-1];
    }
    int attCtr = 1;
    for( int j=0; j<nvar; j++)
    {
      for(int k=delay[j]; k<(delay[j]+nlags[j]); k++)
      {
        temp_Examples[i][attCtr] = Data[j][i+max_memory-k];
        attCtr++;
      }
    }    
  }
  // Print out uncleaned example table
  //for( int j=0; j<temp_Examples.size(); j++)
  //{
  //  cout << setw(15) << TS[j];
  //  for( int i=0; i<=nattributes; i++)
  //  {
  //    cout << setw(7) << temp_Examples[j][i];
  //  }
  //  cout << endl;
  //}
  cout << "# Clean time-series data by getting rid of records containing N/A records" << endl;
  for( int i=0; i<temp_Examples.size(); i++ )
  {
    int flag = 1;
    for( int j=0; j<=nattributes; j++ )
    {
      if( temp_Examples[i][j] == NAFlag )
      {
        flag = 0;
      }
    }
    if( flag == 1 )
    {
      Examples.push_back(temp_Examples[i]);
      Timestamp.push_back(temp_Timestamp[i]);
    }
  }
  // Print out cleaned example table
  //for( int j=0; j<Examples.size(); j++)
  //{
  //  cout << setw(15) << Timestamp[j];
  //  for( int i=0; i<=nattributes; i++)
  //  {
  //    cout << setw(7) << Examples[j][i];
  //  }
  //  cout << endl;
  //}
}
